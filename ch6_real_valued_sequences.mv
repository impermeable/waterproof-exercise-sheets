# Real-valued sequences
<hint title="üì¶ Import libraries (click to open/close)">
```coq
Set Default Goal Selector "!".

Require Import Coq.Reals.Reals.
Require Import Waterproof.Tactics.
Require Import Waterproof.Notations.Common.
Require Import Waterproof.Notations.Reals.
Require Import Waterproof.Notations.Sets.
Require Import Waterproof.Chains.
Require Import Waterproof.Automation.
Require Import Waterproof.Libs.Analysis.Sequences.

Require Import Waterproof.Libs.Reals.

Waterproof Enable Automation RealsAndIntegers.
Waterproof Enable Automation Intuition.

Open Scope R_scope.
Open Scope subset_scope.

Definition prop_5_2_2 := is_bounded_equivalence.
Definition application_of_prop_5_2_2 (a : ‚Ñï ‚Üí ‚Ñù) :=
  iff_trans(_, _, (is_bounded_above a ‚àß is_bounded_below a), prop_5_2_2 a).

Notation "'max(' x , y )" := (Rmax x y)
  (format "'max(' x ,  y ')'").
Notation "'min(' x , y )" := (Rmin x y)
  (format "'min(' x ,  y ')'").

Inductive answer : Type :=
| Yes : answer.

Set Default Timeout 20.
```
</hint>
## Exercise 6.8.1 (Proposition 6.1.4)
<hint title="üí° Hint (click to open/close)">You might want to use that
$$
\text{for all } x, M ‚àà ‚Ñù, \text{ if } -M ‚â§ x \text{ and } x ‚â§ M \text{ then } |x| ‚â§ M
$$and vice versa.
</hint>
```coq
Section Prop_6_1_4.

Variable a : ‚Ñï ‚Üí ‚Ñù.

Lemma exercise_6_8_1 :
  (a is _bounded_)
    ‚áî
  (a is _bounded above_ ‚àß a is _bounded below_).
Proof.
By application_of_prop_5_2_2 it suffices to show that
  ((‚àÉ M > 0, ‚àÄ n ‚àà ‚Ñï, | a(n) | ‚â§ M)
    ‚áî
  (a is _bounded above_ ‚àß a is _bounded below_)).
```
<input-area>
```coq

```
</input-area>
```coq
Qed.

End Prop_6_1_4.
```
## Exercise 6.8.2 (Proposition 6.6.2 item (i))
```coq
Section Prop_6_2_2_i.
Variable a : ‚Ñï ‚Üí ‚Ñù.
Definition a_opp (n : ‚Ñï) := - a(n).
```

```coq
Lemma exercise_6_8_2 :
  a _diverges to ‚àû_
    ‚áî
  a_opp _diverges to -‚àû_.
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.

End Prop_6_2_2_i.
```

## Declaration of own work

Please declare that the work above is your own work, by writing `Yes.` as an answer on the line below. In particular, this means that the proofs above are typed by yourself, and that you could give an explanation of the proof when asked.
```coq
Definition own_work : answer. exact
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```
