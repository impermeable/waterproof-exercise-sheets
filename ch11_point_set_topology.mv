# Point-set topology<hint title="ðŸ“¦ Import libraries (click to open/close)">
```coq
Set Default Goal Selector "!".

Require Import Coq.Reals.Reals.
Require Import Waterproof.Tactics.
Require Import Waterproof.Notations.Common.
Require Import Waterproof.Notations.Reals.
Require Import Waterproof.Notations.Sets.
Require Import Waterproof.Chains.
Require Import Waterproof.Libs.Analysis.OpenAndClosed.
Require Import Waterproof.Automation.

Waterproof Enable Automation RealsAndIntegers.
Waterproof Enable Automation Intuition.

Open Scope R_scope.
Open Scope subset_scope.

Notation "'max(' x , y )" := (Rmax x y)
  (format "'max(' x ,  y ')'").
Notation "'min(' x , y )" := (Rmin x y)
  (format "'min(' x ,  y ')'").

Inductive answer : Type :=
| Yes : answer.

Set Default Timeout 20.
```
</hint><hint title="ðŸ’¡ Hint (click to open/close)">Recall that `x âˆˆ B(p,r)` is equivalent to `|x - p| < r` .
</hint>
## Exercise: prove that the interval $[0, 1)$ is not open

**Hint:** Recall how to expand definitions. You can for instance use
```
Expand the definition of open.
```
to use the definition of open in one of the assumptions.

Note however that this definition of open uses old syntax, and will read
```
It holds that (âˆ€ a, [0, 1) a â‡¨ a is an _interior point_ of [0, 1)).
```
This should and can be read as
```
It holds that (âˆ€ a âˆˆ [0, 1), a is an _interior point_ of [0, 1)).
```
**Hint:** Recall that you can use
```
We claim that (...).
{
  (* proof of claim here *)
}
```
to make a claim and prove it.
```coq
Lemma not_open : Â¬ ([0,1) is _open_).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

## Exercise: prove that the interval $[0, 1)$ is not closed.
```coq
Lemma not_closed : Â¬ ([0,1) is _closed_).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

## Declaration of own work

Please declare that the work above is your own work, by writing `Yes.` as an answer on the line below. In particular, this means that the proofs above are typed by yourself, and that you could give an explanation of the proof when asked.
```coq
Definition own_work : answer. exact
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```
