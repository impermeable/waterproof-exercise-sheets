# Metric spaces<hint title="üì¶ Import libraries (click to open/close)">
```coq
Require Import Coq.Reals.Reals.
Require Import Waterproof.Tactics.
Require Import Waterproof.Notations.Common.
Require Import Waterproof.Notations.Reals.
Require Import Waterproof.Notations.Sets.
Require Import Waterproof.Chains.
Require Import Waterproof.Automation.
Require Import Coq.Logic.FinFun.

Require Import Waterproof.Libs.Analysis.MetricSpaces.

Waterproof Enable Automation RealsAndIntegers.

Set Default Goal Selector "!".

Notation "'max(' x , y )" := (Rmax x y)
  (format "'max(' x ,  y ')'").
Notation "'min(' x , y )" := (Rmin x y)
  (format "'min(' x ,  y ')'").

Inductive answer : Type :=
| Yes : answer.
```
</hint>#### **Before we start, some remarks regarding syntax.**

The formulation of the proof steps available in Waterproof is quite strict. You can always consult the tutorial to revisit these formulations.
You can also click the water drop on the left and click on the "Tactics" button and a list with possible tactics will show up.

#### **Declaration of own work**

Before we start, please declare that the work below is your own work, by writing `Yes.` as an answer on the line below. In particular, this means that the proofs below are typed by yourself, and that you could give an explanation of the proof when asked.
```coq
Definition own_work : answer. exact
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```
## Exercise 2.7.1
```coq
Section Exercise_2_7_1.

Variable (Y : Metric_Space) (X : Set) (f : X ‚Üí Y).
Hypothesis f_is_injective : Injective f.

Notation "'dist_Y(' x , z )" := (dist Y x z) (format "'dist_Y(' x ,  z ')'").

Variable d : X -> X -> ‚Ñù.
Hypothesis definition_d :
  ‚àÄ x ‚àà X, ‚àÄ z ‚àà X, d(x, z) = dist_Y(f(x), f(z)).
```
The above basically says: Let $(Y, \mathsf{dist}_Y)$ be a metric space, let $X$ is a set, and assume $f : X \rightarrow Y$ is injective.

Let the function $d : X \times X \rightarrow \mathbb{R}$ satisfy that for all $x, z \in X$,
$$
d(x, z) := \mathsf{dist}_Y(f(x), f(z)).
$$
In this exercise we would like to check that $d$ is a distance on $X$, by checking the five properties of a distance. Because $\text{dist}_Y$ is a distance, it satisfies those five properties which define the concept of *distance*:
```coq
Check (dist_positive Y).
Check (dist_non_degenerate Y).
Check (dist_symmetric Y).
Check (dist_triangle_inequality Y).
Check (dist_reflexive Y).
```
<hint title="üí° Hint (click to open/close)">If you want to use a lemma that was already proven, you could write

`By (`*name of lemma*`) it holds that (`*what you want to show with that lemma*`) (`*optional label of hypothesis*`).`

For instance, in this first lemma, it might be a good idea to use

`(dist_positive Y)`.

Good luck!</hint><hint title="üí° Hint (click to open/close)">Recall from the `tutorial` that to write a chain of (in)equalities you can use the following syntax

`
We conclude that
  (&  3 < 4 = 2 + 2).
`</hint>
```coq
Lemma d_positive : ‚àÄ x ‚àà X, ‚àÄ y ‚àà X, d(x, y) ‚â• 0.
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
Lemma d_non_degenerate : ‚àÄ x ‚àà X, ‚àÄ y ‚àà X, (d(x, y) = 0) ‚áí (x = y).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
Lemma d_symmetric : ‚àÄ x ‚àà X, ‚àÄ y ‚àà X, d(x, y) = d(y, x).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
Lemma d_triangle_inequality : ‚àÄ x ‚àà X, ‚àÄ y ‚àà X, ‚àÄ z ‚àà X,
  d(x, z) ‚â§ d(x, y) + d(y, z).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
Lemma d_reflexive : ‚àÄ x ‚àà X, d(x, x) = 0.
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
End Exercise_2_7_1.
```
## Exercise 2.7.3
```coq
Module Exercise_2_7_3.
```
Consider the function $d : \mathbb{R} \times \mathbb{R} \to \mathbb{R}$ defined by
$$
  d(a, b) =
	\begin{cases}
		0, &\text{if } a = b,\\
		3, &\text{if } a \neq b.
	\end{cases}
$$
Show that $d$ is a distance function on $\mathbb{R}\,$.<hint title="üí° Hint (click to open/close)">In the following lemmas, you will notice that you have to distinguish cases.
In particular, it might be useful to distinguish on the cases $a = b$ and $a \neq b$.

In Waterproof, you can do that by using the following:

```Either (```*case 1*```) or (```*case 2*```).```</hint><hint title="üí° Hint (click to open/close)">**Remember:** to add the symbol `‚â†`, type `\not-equal` and press **Enter**.</hint>
```coq
Notation "'d(' a , b )" := (d_discrete_R a b) (format "'d(' a ,  b ')'").
```

```coq
Lemma d_positive : ‚àÄ a ‚àà ‚Ñù, ‚àÄ b ‚àà ‚Ñù, d(a, b) ‚â• 0.
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
Lemma d_non_degenerate :
  ‚àÄ a ‚àà ‚Ñù, ‚àÄ b ‚àà ‚Ñù, (d(a, b) = 0) ‚áí (a = b).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
Lemma d_symmetric : ‚àÄ a ‚àà ‚Ñù, ‚àÄ b ‚àà ‚Ñù, d(a, b) = d(b, a).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```
<hint title="üí° Hint (click to open/close)">
If you know that $a = b$ and $b = c$, what do you know about the relation between $a$ and $c$?
What do you know for the case when $a \neq b$ and $b = c$ or when $a = b$ and $b \neq c$?
And for $a \neq b$ and $b \neq c$?</hint>
```coq
Lemma d_triangle_inequality :
  ‚àÄ a ‚àà ‚Ñù, ‚àÄ b ‚àà ‚Ñù, ‚àÄ c ‚àà ‚Ñù, d(a, c) ‚â§ d(a, b) + d(b, c).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
Lemma d_reflexive : ‚àÄ a ‚àà ‚Ñù, d(a, a) = 0.
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
End Exercise_2_7_3.
```
